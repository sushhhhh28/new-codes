# Create VPC
resource "aws_vpc" "prod-vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "prod-vpc"
  }
}

# Create Internet Gateway
resource "aws_internet_gateway" "prod-igw" {
  vpc_id = aws_vpc.prod-vpc.id
  tags = {
    Name = "prod-igw"
  }
}

# Public Subnet
resource "aws_subnet" "public-subnet" {
  vpc_id     = aws_vpc.prod-vpc.id
  cidr_block = "10.0.0.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "public-subnet"
  }
}

# Private Subnet
resource "aws_subnet" "private-subnet" {
  vpc_id     = aws_vpc.prod-vpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "private-subnet"
  }
}

# Security Group
resource "aws_security_group" "test_access" {
  name        = "test_access"
  description = "Allow SSH and HTTP"
  vpc_id      = aws_vpc.prod-vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "test_access"
  }
}

# Public Route Table
resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.prod-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.prod-igw.id
  }

  tags = {
    Name = "public-rt"
  }
}

# Associate Public Subnet with Public Route Table
resource "aws_route_table_association" "public-rt-asso" {
  subnet_id      = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public-rt.id
}

# Key Pair
resource "aws_key_pair" "terrkp" {
  key_name   = "terrkp"
  public_key = file("/root/.ssh/id_rsa.pub")  # Ensure this file exists and is readable
}

# EC2 Instance in Public Subnet
resource "aws_instance" "sush-server" {
  ami             = "ami-0bdd88bd06d16ba03"
  subnet_id       = aws_subnet.public-subnet.id
  instance_type   = "t3.micro"
  security_groups = [aws_security_group.test_access.id]
  key_name        = aws_key_pair.terrkp.key_name

  tags = {
    Name     = "test-World"
    Stage    = "testing"
    Location = "chennai"
  }
}

# Elastic IP for EC2
resource "aws_eip" "sanjay-ec2-eip" {
  instance = aws_instance.sush-server.id
}

# Elastic IP for NAT Gateway
resource "aws_eip" "nat-eip" {}

# NAT Gateway
resource "aws_nat_gateway" "my-ngw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id     = aws_subnet.public-subnet.id

  tags = {
    Name = "my-ngw"
  }
}

# Private Route Table
resource "aws_route_table" "private-rt" {
  vpc_id = aws_vpc.prod-vpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.my-ngw.id
  }

  tags = {
    Name = "private-rt"
  }
}

# Associate Private Subnet with Private Route Table
resource "aws_route_table_association" "private-asso" {
  subnet_id      = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private-rt.id
}

# EC2 Instance in Private Subnet
resource "aws_instance" "data-server" {
  ami             = "ami-0bdd88bd06d16ba03"
  subnet_id       = aws_subnet.private-subnet.id
  instance_type   = "t3.micro"
  security_groups = [aws_security_group.test_access.id]
  key_name        = aws_key_pair.terrkp.key_name

  tags = {
    Name     = "test-World"
    Stage    = "testing"
    Location = "chennai"
  }
}
